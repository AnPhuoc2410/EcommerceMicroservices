@page "/products"
@using Ecommerce.Model
@inject HttpClient http

<PageTitle>Products</PageTitle>

<h1>Products</h1>

<p>View and manage your product catalog.</p>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else if (products.Count == 0)
{
    <p>No products found. Add some products to get started.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in products)
                {
                    <tr>
                        <td>@product.Id</td>
                        <td>@product.Name</td>
                        <td>@product.Price.ToString("C")</td>
                        <td>@product.Quantity</td>
                        <td>
                            <button class="btn btn-sm btn-primary" @onclick="() => ViewProduct(product.Id)">View</button>
                            <button class="btn btn-sm btn-warning" @onclick="() => EditProduct(product.Id)">Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteProduct(product.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<div class="mt-3">
    <button class="btn btn-success" @onclick="AddNewProduct">Add New Product</button>
</div>

@code {
    List<ProductModel> products = new List<ProductModel>();
    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            products = await http.GetFromJsonAsync<List<ProductModel>>("api/Product");
        }
        catch (Exception ex)
        {
            // Handle error appropriately
            Console.WriteLine($"Error loading products: {ex.Message}");
            products = new List<ProductModel>();
        }
        finally
        {
            isLoading = false;
        }
        await base.OnInitializedAsync();
    }

    private void ViewProduct(int id)
    {
        // Implement view product details logic
        Console.WriteLine($"Viewing product with ID: {id}");
    }

    private void EditProduct(int id)
    {
        // Implement edit product logic
        Console.WriteLine($"Editing product with ID: {id}");
    }

    private void DeleteProduct(int id)
    {
        // Implement delete product logic
        Console.WriteLine($"Deleting product with ID: {id}");
    }

    private void AddNewProduct()
    {
        // Implement add new product logic
        Console.WriteLine("Adding new product");
    }
}
